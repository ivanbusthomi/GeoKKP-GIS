# -*- coding: utf-8 -*-
"""
/***************************************************************************
 GeoKKPDockWidget
                                 A QGIS plugin
 This plugin ports GeoKKP for National Land Agency of Indonesia
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2020-12-24
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Dany Laksono
        email                : danylaksono@ugm.ac.id
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
import requests
import json
import re

from PyQt5.QtWidgets import QLineEdit

from qgis.PyQt import QtGui, QtWidgets, uic
from qgis.PyQt.QtCore import pyqtSignal, QVariant
from qgis.utils import iface
from qgis.core import (Qgis,
                    QgsField,
                    QgsCoordinateReferenceSystem,
                    QgsCoordinateTransform,
                    QgsRectangle,
                    QgsPoint,
                    QgsPointXY,
                    QgsGeometry,
                    QgsWkbTypes,
                    QgsVectorLayer,
                    QgsFeature,
                    QgsVectorFileWriter,
                    QgsProject, QgsApplication)


from .modules.utils import activate_editing, edit_by_identify

# TODO: Compile all UI to py
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'geokkp_dockwidget_base.ui'))


class GeoKKPDockWidget(QtWidgets.QDockWidget, FORM_CLASS):

    closingPlugin = pyqtSignal()

    def __init__(self, parent=iface.mainWindow()):
        """Constructor."""
        super(GeoKKPDockWidget, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://doc.qt.io/qt-5/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.iface = iface
        self.canvas = iface.mapCanvas()
        self.setupUi(self)
        self.project = QgsProject

        

        self._province = None
        self._district = None
        self._kantahid = None
        self._projectCRS = None
        

        # Populate the select province combobox
        self.getProvince()
        self.setProvince()
        

        # Populate the select kab based on province selection
        self.comboBoxKanwil.currentIndexChanged.connect(self.setKabupaten)
        self.buat_basisdata.clicked.connect(self.createDb)
        self.projectCRS.crsChanged.connect(self.set_crs)
        #print(self.getKabupaten(32))



    def closeEvent(self, event):
        self.closingPlugin.emit()
        event.accept()

    def getProvince(self):
        #print("get Province")
        province_url = 'https://dev.farizdotid.com/api/daerahindonesia/provinsi'

        response = requests.get(url=province_url)
        response_json = response.json()['provinsi']
        return response_json
        # print(_province)

    def setProvince(self):
        self.comboBoxKanwil.clear()
        
        
        provinces = {}
        for item in self.getProvince():
            name = item.pop('nama')
            provinces[name] = item
        self._province = provinces
        #print(type(_province))
        #print(self._province)
        self.comboBoxKanwil.addItems(self._province.keys())
        edit = QLineEdit(self) 
        self.comboBoxKanwil.setLineEdit(edit)
        self.comboBoxKanwil.setCurrentText('')


    def getKabupaten(self, idkab):
        #print('getkabupaten')
        kab_url = 'https://dev.farizdotid.com/api/daerahindonesia/kota?id_provinsi='
        kab_url_id = kab_url + str(idkab)
        response = requests.get(url=kab_url_id)
        response_json = response.json()['kota_kabupaten']
        return response_json

    def setKabupaten(self):
        self.comboBoxKantah.clear()
        #print('set kabupaten')
        currentProvince = self.comboBoxKanwil.currentText()
        kabupatenlist = self.getKabupaten(self._province[currentProvince]['id'])
        kabupatens = {}
        for item in kabupatenlist:
            name = item.pop('nama')
            kabupatens[name] = item
        self._district = kabupatens
        
        #print(type(_province))
        #print(self._district)
        self.comboBoxKantah.addItems(self._district.keys())
        edit = QLineEdit(self) 
        self.comboBoxKantah.setLineEdit(edit)
        

    def loadLocation(self):
        print('loading locations')
        if self.comboBoxKantah.count()==0:
            currentDistrict=''
        else:
            currentDistrict = self.comboBoxKantah.currentText()
        geoserver_url='http://54.254.9.31:8080/geoserver/wfs?service=wfs&version=1.0.0&request=getfeature&typename=public:indoadminkab&outputformat=application/json&CQL_FILTER=id='
        districtId = self._district[currentDistrict]['id']
        #print(districtId)
        geoserver_url_id = geoserver_url + '\''+ str(districtId) +'\''
        response = requests.get(url=geoserver_url_id)
        response_json = response.json()
        #print(response_json)
        return response_json

    # -------------------------------------------------------------

    def set_crs(self):
        self._projectCRS = self.projectCRS.crs()
        self.project.instance().setCrs(self._projectCRS)
        print(self._projectCRS)


    def createDb(self):
        projectName = self.nama_kegiatan.text().lower()
        userName = self.nama_pelaksana.text().lower()
        projectName = self.properify(projectName)
        userName = self.properify(userName)
        defaultDirectory = 'C:/GeoKKP-Projects/'
        path = os.path.join(defaultDirectory, userName)
        try: 
            os.makedirs(path, exist_ok = True) 
            print("Directory '%s' created successfully" % userName) 
        except OSError as error: 
            print("Directory '%s' can not be created" % userName) 


        # TODO: fix save project to database (PostGIS/GPKG)
        uri = 'geopackage:C:/GeoKKP-Projects/'+userName+'/project2.gpkg'
        projectUri = uri + '?projectName='+ projectName
        self.project.instance().write(projectUri)

        # populate the project with layers and their attributes
        self.populateGpkg(uri, self._projectCRS)


    
    def populateGpkg(self, uri, crs):
        """
        Populate Project's GPKG with layers:
        - Bidang Tanah (Polygon)
        - Titik Batas Bidang (Point)
        - Transportasi (Polyline)
        - Hidrologi (Polyline)
        - Administrasi (Polygon)
        - Titik Dasar Teknik (Point)
        """

        # Initiate layer as memory
        bidangTanah = QgsVectorLayer("Polygon?crs=epsg:" + str(crs.postgisSrid()), "Persil", "memory")
        titikBatas = QgsVectorLayer("Point?crs=epsg:" + str(crs.postgisSrid()), "Titik Batas Persil", "memory")
        transportasi = QgsVectorLayer("Linestring?crs=epsg:" + str(crs.postgisSrid()), "Transportasi", "memory")
        hidrologi = QgsVectorLayer("Linestring?crs=epsg:" + str(crs.postgisSrid()), "Hidrologi", "memory")
        administrasi = QgsVectorLayer("Polygon?crs=epsg:" + str(crs.postgisSrid()), "Administrasi", "memory")
        titikDasarTeknik = QgsVectorLayer("Point?crs=epsg:" + str(crs.postgisSrid()), "Titik Dasar Teknik", "memory")

        # Populate layers' fields
        # - Bidang Tanah
        pr = bidangTanah.dataProvider()
        pr.addAttributes([QgsField("NIB", QVariant.String),
                 QgsField("Jenis Hak",  QVariant.Int),
                 QgsField("Pemilik", QVariant.Double)])
        bidangTanah.updateFields()


        # TODO: set symbology
        self.set_symbology(bidangTanah, 'simplepersil.qml')
        self.set_symbology(titikDasarTeknik, 'TDT.qml')
        self.set_symbology(administrasi, 'administrasi.qml')
        self.set_symbology(titikBatas, 'bataspersil.qml')
        self.set_symbology(hidrologi, 'hidrologi.qml')
        self.set_symbology(transportasi, 'transportasi.qml')
        
        
        # add all to legend
        self.project.instance().addMapLayers([bidangTanah, titikBatas, \
            transportasi, hidrologi, administrasi, titikDasarTeknik])

        #activate_editing(bidangTanah)
        



    # TODO: refactor for simplicity and remove duplicate function
    def set_symbology(self, layer, qml):
        uri = os.path.join(os.path.dirname(__file__), 'styles/'+qml)
        layer.loadNamedStyle(uri)

        

    def properify(self, text):
        """
        Filter text for OS's friendly directory format

        Remove all non-word characters (everything except numbers and letters) and 
        replace all runs of whitespace with a single dash

        """
        text = re.sub(r"[^\w\s]", '', text)
        text = re.sub(r"\s+", '_', text)

        return text

        






#

        